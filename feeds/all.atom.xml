<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>eijit's blog</title><link href="/" rel="alternate"></link><link href="https://eijit.github.io/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2019-08-18T00:00:00+09:00</updated><entry><title>AtCoder Beginner Contest 138 参加</title><link href="/20190818.html" rel="alternate"></link><published>2019-08-18T00:00:00+09:00</published><updated>2019-08-18T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-18:/20190818.html</id><summary type="html">&lt;p&gt;ABCD の四完答&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc138"&gt;AtCoder Beginner Contest 138&lt;/a&gt; に参加した。今回は ABC 4 完答 の 1978 位でパフォーマンスは 958 だった。&lt;/p&gt;
&lt;p&gt;以下のコードは PyPy3 (2.4.0) と C++14 (GCC 5.4.1) で AC を確認している。&lt;/p&gt;
&lt;h2 id="wen ti  a"&gt;問題 A&lt;/h2&gt;
&lt;p&gt;入力の &lt;span class="math"&gt;\(a\)&lt;/span&gt; が &lt;span class="math"&gt;\(3200\)&lt;/span&gt; 以上かどうかで出力を変える問題なので、そのまま実装した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3200&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  b"&gt;問題 B&lt;/h2&gt;
&lt;p&gt;計算式どおりに計算した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  c"&gt;問題 C&lt;/h2&gt;
&lt;p&gt;計算の順番によって値にどのような影響が出るかを考えた。要素が 3 つの場合を考えればそれ以上にも適用できる。&lt;/p&gt;
&lt;div class="math"&gt;$$s = \frac{\frac{v_i + v_j}{2} + v_k}{2}$$&lt;/div&gt;
&lt;p&gt;とおき、両辺に 4 を掛けて展開すると&lt;/p&gt;
&lt;div class="math"&gt;$$4s = v_i + v_j + 2v_k$$&lt;/div&gt;
&lt;p&gt;となり &lt;span class="math"&gt;\(s\)&lt;/span&gt; への寄与率が最も高いのは &lt;span class="math"&gt;\(v_k\)&lt;/span&gt; とわかる。従って &lt;span class="math"&gt;\(v_1, v_2, \ldots, v_N\)&lt;/span&gt; を昇順に並び替えて、前から各具材を鍋に入れていけば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  d"&gt;問題 D&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(p_i, x_i\)&lt;/span&gt; をその都度、カウンターに加算していくと、最大で &lt;span class="math"&gt;\(NQ\)&lt;/span&gt; 回の処理が必要になり、間に合わないだろうと考えた。そのため&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各 &lt;span class="math"&gt;\(p_i\)&lt;/span&gt; の頂点のカウンタに &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; の値を加える&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1, 2, \ldots, N\)&lt;/span&gt; の頂点を渡り、自分の直属の子に自分のカウンタを足す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とすることで処理回数を &lt;span class="math"&gt;\(N + Q\)&lt;/span&gt; 程度に抑えられるだろうと考えた。しかし PyPy3 (2.4.0) で実装したものの TLE を食らったので C++14 (GCC 5.4.1) に切り替えた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200001&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nl"&gt;j&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  e"&gt;問題 E&lt;/h2&gt;
&lt;p&gt;問題 D の C++ への書き直しに手間取って 20 分くらいしか残っていなかったので十分に考察できず。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="AtCoder"></category><category term="ProgrammingContest"></category></entry><entry><title>オイラーの定理とフェルマーの小定理</title><link href="/20190817.html" rel="alternate"></link><published>2019-08-17T00:00:00+09:00</published><updated>2019-08-17T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-17:/20190817.html</id><summary type="html">&lt;p&gt;剰余の計算でしばしば有用なオイラーの定理とフェルマーの小定理について議論する&lt;/p&gt;</summary><content type="html">&lt;p&gt;ここまでの議論は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./20190811.html"&gt;同値関係&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./20190812.html"&gt;剰余の同値関係に演算を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./20190813.html"&gt;剰余の同値関係で乗法の逆元を考える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照してください。&lt;/p&gt;
&lt;h2 id="oiranoding li"&gt;オイラーの定理&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; で &lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素な &lt;span class="math"&gt;\(a \in \mathbb{Z}\)&lt;/span&gt; を一つ取る。このとき &lt;span class="math"&gt;\(\overline{a}\)&lt;/span&gt; に自分自身を繰り返しかけると &lt;span class="math"&gt;\(\overline{a}\)&lt;/span&gt; は零因子ではないため、いつかは &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; になる。仮に &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; にならなかったとすると、べき乗したときの値の候補は有限であるため &lt;span class="math"&gt;\(\overline{a}^k = \overline{a}^l\)&lt;/span&gt; となる &lt;span class="math"&gt;\(k, l \in \mathbb{Z}\)&lt;/span&gt; が存在する。仮定より &lt;span class="math"&gt;\(\overline{a}\)&lt;/span&gt; の逆元が存在するので、両辺に &lt;span class="math"&gt;\(\overline{a}^{-1}\)&lt;/span&gt; を &lt;span class="math"&gt;\(l\)&lt;/span&gt; 回かけて &lt;span class="math"&gt;\(\overline{a}^{k - l} = \overline{1}\)&lt;/span&gt; となる。&lt;/p&gt;
&lt;p&gt;このように &lt;span class="math"&gt;\(\overline{a}^k = \overline{1}\)&lt;/span&gt; となる &lt;span class="math"&gt;\(k\)&lt;/span&gt; を &lt;span class="math"&gt;\(\overline{a}\)&lt;/span&gt; の位数という。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(1\)&lt;/span&gt; 以上 &lt;span class="math"&gt;\(n\)&lt;/span&gt; 以下の整数で &lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素なものの個数を表す関数&lt;/p&gt;
&lt;div class="math"&gt;$$\varphi\left(n\right) = \#\left\{ m \in \mathbb{N} | 1 \le m \le n, \gcd(m, n) = 1 \right\}$$&lt;/div&gt;
&lt;p&gt;をオイラー関数という。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素な &lt;span class="math"&gt;\(a \in \mathbb{Z}\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;div class="math"&gt;$$a^{\varphi\left(n\right)} \equiv 1 \mod(n)$$&lt;/div&gt;
&lt;p&gt;となり、これをオイラーの定理という。&lt;/p&gt;
&lt;p&gt;オイラー関数について&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(p\)&lt;/span&gt; が素数のとき &lt;span class="math"&gt;\(\varphi\left(p\right) = p - 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(p^m\)&lt;/span&gt; で &lt;span class="math"&gt;\(p\)&lt;/span&gt; が素数のとき &lt;span class="math"&gt;\(\varphi\left(p^m\right) = p^n - p^{n-1} = p^n (1 - 1/p)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(l, m\)&lt;/span&gt; が互いに素のとき &lt;span class="math"&gt;\(\varphi\left(lm\right) = \varphi\left(l\right)\varphi\left(m\right)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が成り立つ。したがって &lt;span class="math"&gt;\(n\)&lt;/span&gt; を割り切るすべての素数を &lt;span class="math"&gt;\(\left\{p_1, p_2, \ldots, p_m\right\}\)&lt;/span&gt; とすると&lt;/p&gt;
&lt;div class="math"&gt;$$\varphi\left(n\right) = n \left(1 - \frac{1}{p_1}\right)\left(1 - \frac{1}{p_2}\right)\dots\left(1 - \frac{1}{p_m}\right)$$&lt;/div&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;h3 id="li  \(n = 15\)"&gt;例 &lt;span class="math"&gt;\(n = 15\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n = 15\)&lt;/span&gt; とすると &lt;span class="math"&gt;\(15 = 3 \times 5\)&lt;/span&gt; より &lt;span class="math"&gt;\(\varphi\left(15\right) = (3 - 1)(5 - 1) = 8\)&lt;/span&gt; となる。実際に&lt;/p&gt;
&lt;div class="math"&gt;$$2^8 = 256 = 17 \times 15 + 1 \equiv 1 \mod(15)$$&lt;/div&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;h2 id="huerumanoxiao ding li_1"&gt;フェルマーの小定理&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n = p\)&lt;/span&gt; が素数の場合のオイラーの定理&lt;/p&gt;
&lt;div class="math"&gt;$$a^{\varphi\left(p\right)} = a^{p - 1} \equiv 1 \mod(p)$$&lt;/div&gt;
&lt;p&gt;をフェルマーの小定理という。&lt;/p&gt;
&lt;p&gt;フェルマーの小定理の対偶は大きな数の素数判定に利用され、フェルマーテストと言われる。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n \in \mathbb{N}\)&lt;/span&gt; が素数かどうか判定したい場合に以下の手順で確率的に素数の可能性が高い数を判定できる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2 \le a &amp;lt; n, a \in \mathbb{N}\)&lt;/span&gt; を一つ選ぶ&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\gcd(a, n) \ne 1\)&lt;/span&gt; であれば &lt;span class="math"&gt;\(n\)&lt;/span&gt; は合成数となり終了&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a ^ {n - 1} \not\equiv 1 \mod(n)\)&lt;/span&gt; であれば &lt;span class="math"&gt;\(n\)&lt;/span&gt; は合成数となり終了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上記の手順を繰り返しパスし続けることで素数の可能性が高まる。このテストは例えば RSA 暗号で大きな素数を生成する際に利用されることがある。&lt;/p&gt;
&lt;h2 id="kamaikerunoding li"&gt;カーマイケルの定理&lt;/h2&gt;
&lt;p&gt;フェルマーテストにすべて通過する、つまり &lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素な &lt;span class="math"&gt;\(n\)&lt;/span&gt; 以下の任意の自然数 &lt;span class="math"&gt;\(a\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;div class="math"&gt;$$a ^ {n - 1} \equiv 1 \mod(n)$$&lt;/div&gt;
&lt;p&gt;となる自然数が存在するとき、この &lt;span class="math"&gt;\(n\)&lt;/span&gt; をカーマイケル数という。カーマイケル数は &lt;span class="math"&gt;\(561, 1105, 1729, \ldots\)&lt;/span&gt; と無数に存在することが知られている。&lt;/p&gt;
&lt;p&gt;さて、ここでオイラーの定理の例の &lt;span class="math"&gt;\(n = 15\)&lt;/span&gt; に戻ろう。少し計算してみると&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^2 = 4\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^3 = 8\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(2^4 = 16 \equiv 1 \mod(15)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;と &lt;span class="math"&gt;\(\varphi\left(15\right) = 8\)&lt;/span&gt; よりも小さい指数でべき乗すると &lt;span class="math"&gt;\(1\)&lt;/span&gt; になるものが見つかった。オイラーの定理を改良し最小の指数を求める方法が知られている。&lt;/p&gt;
&lt;p&gt;ここでカーマイケル関数 &lt;span class="math"&gt;\(\lambda(n)\)&lt;/span&gt; を下記のように定義する。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n = 2^m\)&lt;/span&gt; の場合は&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(m = 1\)&lt;/span&gt; のときは &lt;span class="math"&gt;\(\lambda(2^m) = 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(m = 2\)&lt;/span&gt; のときは &lt;span class="math"&gt;\(\lambda(2^m) = 2\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(m &amp;gt; 2\)&lt;/span&gt; のときは &lt;span class="math"&gt;\(\lambda(2^m) = 2^{m - 2}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;と定義する。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; が奇素数 &lt;span class="math"&gt;\(p\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(n = p^m\)&lt;/span&gt; と書けるなら&lt;/p&gt;
&lt;div class="math"&gt;$$\lambda(p^m) = p^{m-1} (p - 1)$$&lt;/div&gt;
&lt;p&gt;と定義する。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n = {p_1}^{m_1} {p_2}^{m_2} \dots {p_k}^{m_k}\)&lt;/span&gt; と素因数分解されるなら&lt;/p&gt;
&lt;div class="math"&gt;$$\lambda({p_1}^{m_1} {p_2}^{m_2} \dots {p_k}^{m_k}) = lcm \left\{\lambda\left({p_1}^{m_1}\right), \lambda\left({p_2}^{m_2}\right), \ldots, \lambda\left({p_k}^{m_k}\right)\right\}$$&lt;/div&gt;
&lt;p&gt;と定義する。ここで lcm は最小公倍数とする。このとき &lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素な &lt;span class="math"&gt;\(a\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;div class="math"&gt;$$a ^ {\lambda(n)} \equiv 1 \mod(n)$$&lt;/div&gt;
&lt;p&gt;が成り立ち &lt;span class="math"&gt;\(\lambda(n)\)&lt;/span&gt; が最小の数となる。これをカーマイケルの定理という。&lt;/p&gt;
&lt;p&gt;実際に &lt;span class="math"&gt;\(n = 15\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;div class="math"&gt;$$\lambda(15) = lcm \left\{\lambda(3), \lambda(5)\right\} = lcm \left\{(3 - 1), (5 - 1) \right\} = 4$$&lt;/div&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;なお &lt;span class="math"&gt;\(\lambda(n)\)&lt;/span&gt; が &lt;span class="math"&gt;\(n - 1\)&lt;/span&gt; の約数であるとき &lt;span class="math"&gt;\(n\)&lt;/span&gt; はカーマイケル数となる。&lt;/p&gt;
&lt;h2 id="matome"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素な自然数 &lt;span class="math"&gt;\(a\)&lt;/span&gt; に対して、べき乗すると &lt;span class="math"&gt;\(n\)&lt;/span&gt; を法として &lt;span class="math"&gt;\(1\)&lt;/span&gt; と合同になる指数を具体的に求めるいくつかの方法を紹介しました。&lt;/p&gt;
&lt;p&gt;オイラーの定理で &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数の場合はフェルマーの小定理と呼ばれていること (歴史的にはフェルマーの小定理をオイラーが一般の場合に拡張した) と、オイラー関数を改良して最小の値を与えるカーマイケル関数を紹介しました。&lt;/p&gt;
&lt;p&gt;フェルマーの小定理は素数判定に利用される (フェルマーテスト) ことと、フェルマーテストをすべてすり抜ける擬素数がカーマイケル数と呼ばれていることを紹介しました。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Residual"></category></entry><entry><title>剰余の同値関係で乗法の逆元を考える</title><link href="/20190813.html" rel="alternate"></link><published>2019-08-13T00:00:00+09:00</published><updated>2019-08-13T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-13:/20190813.html</id><summary type="html">&lt;p&gt;剰余の同値関係で除算について考察する。&lt;/p&gt;</summary><content type="html">&lt;p&gt;ここまでの議論は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./20190811.html"&gt;同値関係&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./20190812.html"&gt;剰余の同値関係に演算を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照してください。&lt;/p&gt;
&lt;h2 id="li woguan cha suru"&gt;例を観察する&lt;/h2&gt;
&lt;p&gt;商集合 &lt;span class="math"&gt;\(\mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(n = 7\)&lt;/span&gt; とする。このとき各同値類について乗算結果を調べる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この表を観察してわかるのは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; をかけると &lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; になる&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; をかけても値が変わらない&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; をかけた行または列を除いて &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; から &lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt; が一度ずつ現れる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、上の 2 つは自明だが最後の 1 つはいつでも成り立つだろうか。これはいつでも成り立つわけではなく例えば &lt;span class="math"&gt;\(n = 6\)&lt;/span&gt; とすると&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{5}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{4}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{3}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;となり &lt;span class="math"&gt;\(\overline{2} \times \overline{3} = \overline{0}\)&lt;/span&gt; など &lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; ではない値同士を掛けて &lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; になるものが見受けられる。一般に &lt;span class="math"&gt;\(0\)&lt;/span&gt; ではない環の元を掛けて &lt;span class="math"&gt;\(0\)&lt;/span&gt; になる元のことを零因子という。&lt;/p&gt;
&lt;p&gt;ところで零因子を持つ環では&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\overline{2} \times \overline{2} = \overline{4}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\overline{5} \times \overline{2} = \overline{4}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と &lt;span class="math"&gt;\(\overline{2} \ne \overline{5}\)&lt;/span&gt; より、両者の左辺の後ろの項の &lt;span class="math"&gt;\(\overline{2}\)&lt;/span&gt; を取り除くといった簡約ができないことに注意する。&lt;/p&gt;
&lt;h2 id="fa  \(n\) wosu shu toshitachang he noni yuan"&gt;法 &lt;span class="math"&gt;\(n\)&lt;/span&gt; を素数とした場合の逆元&lt;/h2&gt;
&lt;p&gt;容易に推測されるように &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数の場合は零因子を持たず、合成数の場合はその約数が零因子となる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\overline{0}\)&lt;/span&gt; をかけた行または列を除いて &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; から &lt;span class="math"&gt;\(\overline{6}\)&lt;/span&gt; が一度ずつ現れる&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;に戻る。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; を素数とし &lt;span class="math"&gt;\(\mathbb{Z}/n\mathbb{Z} \ni \overline{a} \ne \overline{0}\)&lt;/span&gt; を 1 つ取る。相異なる &lt;span class="math"&gt;\(\overline{p}, \overline{q} \in \mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; に対して、&lt;/p&gt;
&lt;div class="math"&gt;$$\overline{a} \times \overline{p} \ne \overline{a} \times \overline{q}$$&lt;/div&gt;
&lt;p&gt;を示せれば、列または行のどの相異なる値も等しくないことになり題意を示せる。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\overline{a} \times \overline{p} = \overline{a} \times \overline{q}\)&lt;/span&gt; として矛盾を導く。演算に関して代表元のとり方によらないことはすでに確認したので、この仮定は &lt;span class="math"&gt;\(a \times p \equiv a \times q \mod n\)&lt;/span&gt; と言い換えても良い。移項して整理すると&lt;/p&gt;
&lt;div class="math"&gt;$$a (p - q) \equiv 0 \mod n$$&lt;/div&gt;
&lt;p&gt;であるがここで &lt;span class="math"&gt;\(n\)&lt;/span&gt; は素数なので &lt;span class="math"&gt;\(a\)&lt;/span&gt; または &lt;span class="math"&gt;\(p - q\)&lt;/span&gt; が &lt;span class="math"&gt;\(n\)&lt;/span&gt; で割り切れる。仮定 &lt;span class="math"&gt;\(\overline{a} \ne \overline{0}\)&lt;/span&gt; より &lt;span class="math"&gt;\(a\)&lt;/span&gt; は &lt;span class="math"&gt;\(n\)&lt;/span&gt; で割り切れないので &lt;span class="math"&gt;\(p - q\)&lt;/span&gt; が &lt;span class="math"&gt;\(n\)&lt;/span&gt; で割り切れる。つまり &lt;span class="math"&gt;\(p \equiv q \mod n\)&lt;/span&gt; より &lt;span class="math"&gt;\(\overline{p} = \overline{q}\)&lt;/span&gt; となり &lt;span class="math"&gt;\(\overline{p}\)&lt;/span&gt; と &lt;span class="math"&gt;\(\overline{q}\)&lt;/span&gt; が相異なるという仮定に矛盾する。&lt;/p&gt;
&lt;p&gt;ここまでで &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数の場合に &lt;span class="math"&gt;\(\overline{a} \in \mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; に対して、すべての元をかけると &lt;span class="math"&gt;\(\mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; の値が 1 つずつ現れることがわかった。つまり、掛けると &lt;span class="math"&gt;\(\overline{1}\)&lt;/span&gt; になる元が存在することがわかった。この元のことを &lt;span class="math"&gt;\(\overline{a}\)&lt;/span&gt; の逆元といい &lt;span class="math"&gt;\(\overline{a}^{-1}\)&lt;/span&gt; とかく。&lt;/p&gt;
&lt;p&gt;乗法の逆元は、ユークリッドの互除法により効率よく得られることが知られている。&lt;/p&gt;
&lt;p&gt;なお &lt;span class="math"&gt;\(n\)&lt;/span&gt; が合成数の場合にも、零因子を除けば逆元が存在する。例えば &lt;span class="math"&gt;\(n = 6\)&lt;/span&gt; の場合に &lt;span class="math"&gt;\(\overline{5}^{-1} = \overline{5}\)&lt;/span&gt; など。零因子ではない (&lt;span class="math"&gt;\(n\)&lt;/span&gt; と互いに素) であることを利用して &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数の場合と同じ論法で証明できる。または有限集合の単射は全単射であることからも示せる。&lt;/p&gt;
&lt;h2 id="matome"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;法 &lt;span class="math"&gt;\(n\)&lt;/span&gt; が素数の場合は、乗法の逆元が存在する、すなわち割り算が可能であるとわかった。&lt;/p&gt;
&lt;h2 id="yu tan"&gt;余談&lt;/h2&gt;
&lt;p&gt;以下で脱線する。&lt;/p&gt;
&lt;p&gt;とても大雑把に言うと、四則演算が自由にできる (ただし &lt;span class="math"&gt;\(0\)&lt;/span&gt; による除算を除く) 代数的構造を体という。つまり素数 &lt;span class="math"&gt;\(n\)&lt;/span&gt; を法とした剰余による同値関係を入れた商集合は体である。無限集合であった整数環に制限を加えて有限集合にしたことにより演算の自由度が増し、体となった。整数同士の割り算を付け加えて有理数体に拡張するのとは異なるアプローチであり、面白い。なお、有理数体は &lt;span class="math"&gt;\(E = \mathbb{Z} \times \left(\mathbb{Z} - \{0\}\right)\)&lt;/span&gt; を考えるとき&lt;/p&gt;
&lt;div class="math"&gt;$$(a, b), (c, d) \in E$$&lt;/div&gt;
&lt;p&gt;に対して&lt;/p&gt;
&lt;div class="math"&gt;$$(a, b) \sim (c, d) \Leftrightarrow a \times d = b \times c$$&lt;/div&gt;
&lt;p&gt;という同値関係、つまり、比が等しいものを同じとみなす同値関係を入れて商集合を考えて&lt;/p&gt;
&lt;div class="math"&gt;$$\mathbb{Q} = E / \sim$$&lt;/div&gt;
&lt;p&gt;これを有理数体とする、という方針で構成する。自然に演算が定義できる (well-defined) ことも確かめられる。&lt;/p&gt;
&lt;p&gt;実数体 &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt; の構成はこれらとは全く異なるアプローチを取る。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Residual"></category></entry><entry><title>剰余の同値関係に演算を導入する</title><link href="/20190812.html" rel="alternate"></link><published>2019-08-12T00:00:00+09:00</published><updated>2019-08-12T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-12:/20190812.html</id><summary type="html">&lt;p&gt;剰余の同値関係に四則演算 (除算は後ほど) を導入し、演算が安全であることを確認する。&lt;/p&gt;</summary><content type="html">&lt;p&gt;ここまでの議論は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./20190811.html"&gt;同値関係&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照してください。&lt;/p&gt;
&lt;h2 id="ji hao nozhun bei"&gt;記号の準備&lt;/h2&gt;
&lt;p&gt;整数環 &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; とその &lt;span class="math"&gt;\(0\)&lt;/span&gt; でない元 &lt;span class="math"&gt;\(n \in \mathbb{Z}\)&lt;/span&gt; を一つ取る。同値関係を &lt;span class="math"&gt;\(a, b \in \mathbb{Z}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\( a \equiv b \mod n\)&lt;/span&gt; と定めると、同値類は全部で &lt;span class="math"&gt;\(n\)&lt;/span&gt; 個あり&lt;/p&gt;
&lt;div class="math"&gt;$$C(0), C(1), \ldots, C(n-1)$$&lt;/div&gt;
&lt;p&gt;であるが、簡単のため&lt;/p&gt;
&lt;div class="math"&gt;$$\overline{0}, \overline{1}, \ldots, \overline{n-1}$$&lt;/div&gt;
&lt;p&gt;と書くことにする。&lt;/p&gt;
&lt;p&gt;また商集合を&lt;/p&gt;
&lt;div class="math"&gt;$$\mathbb{Z}/n\mathbb{Z}$$&lt;/div&gt;
&lt;p&gt;と書くことにする。&lt;/p&gt;
&lt;h2 id="yan suan nodao ru"&gt;演算の導入&lt;/h2&gt;
&lt;p&gt;この同値類の間にも整数と同様の自然な演算が定義できると望ましい。例えば &lt;span class="math"&gt;\(n = 7\)&lt;/span&gt; としたときに &lt;span class="math"&gt;\(9, 16 \in \overline{2}\)&lt;/span&gt; と &lt;span class="math"&gt;\(3, 17 \in \overline{3}\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;div class="math"&gt;$$9 + 3 = 12 \equiv 5 \mod 7$$&lt;/div&gt;
&lt;div class="math"&gt;$$16 + 17 = 33 \equiv 5 \mod 7$$&lt;/div&gt;
&lt;p&gt;と同値類のどの元に対してもうまく演算できるように見える。このことを代表元のとり方によらない、という。&lt;/p&gt;
&lt;h3 id="jia fa noque ren"&gt;加法の確認&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\overline{p}, \overline{q} \in \mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; に対して、加法 &lt;span class="math"&gt;\(+\)&lt;/span&gt; を&lt;/p&gt;
&lt;div class="math"&gt;$$\overline{p} + \overline{q} = \overline{p + q}$$&lt;/div&gt;
&lt;p&gt;と定める。このとき加法が代表元のとり方によらないことを示す。&lt;/p&gt;
&lt;p&gt;任意の &lt;span class="math"&gt;\(a \in \overline{p}, b \in \overline{q}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(a = r \times n + p, b = s \times n + q\)&lt;/span&gt; となる &lt;span class="math"&gt;\(r, s \in \mathbb{Z}\)&lt;/span&gt; が存在する。&lt;/p&gt;
&lt;div class="math"&gt;$$a + b = r \times n + p + s \times n + q = (r + s) \times n + p + q \equiv p + q \mod n$$&lt;/div&gt;
&lt;p&gt;より代表元のとり方によらないことがわかった。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\overline{p}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(\overline{-p}\)&lt;/span&gt; は加法に関する逆元となる。証明は容易なので省略する。&lt;/p&gt;
&lt;h3 id="cheng fa noque ren"&gt;乗法の確認&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\overline{p}, \overline{q} \in \mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; に対して、乗法 &lt;span class="math"&gt;\(\times\)&lt;/span&gt; を&lt;/p&gt;
&lt;div class="math"&gt;$$\overline{p} \times \overline{q} = \overline{p \times q}$$&lt;/div&gt;
&lt;p&gt;と定める。このとき乗法が代表元のとり方によらないことを示す。&lt;/p&gt;
&lt;p&gt;任意の &lt;span class="math"&gt;\(a \in \overline{p}, b \in \overline{q}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(a = r \times n + p, b = s \times n + q\)&lt;/span&gt; となる &lt;span class="math"&gt;\(r, s \in \mathbb{Z}\)&lt;/span&gt; が存在する。&lt;/p&gt;
&lt;div class="math"&gt;$$a \times b = (r \times n + p) \times (s \times n + q) = (r \times s \times n + r \times q + s \times p) \times n + p \times q \equiv p \times q \mod n$$&lt;/div&gt;
&lt;p&gt;より代表元のとり方によらないことがわかった。&lt;/p&gt;
&lt;h2 id="matome_1"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ここまでで剰余の同値関係に関して、同値類の間に自然な演算を定義でき、この演算が安全であることを確認した。割り算に関しては次回に取り扱う。&lt;/p&gt;
&lt;p&gt;なお &lt;span class="math"&gt;\(\mathbb{Z}/n\mathbb{Z}\)&lt;/span&gt; はここで定義した加法と乗法に関して環をなす。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Residual"></category></entry><entry><title>同値関係</title><link href="/20190811.html" rel="alternate"></link><published>2019-08-11T00:00:00+09:00</published><updated>2019-08-11T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-11:/20190811.html</id><summary type="html">&lt;p&gt;剰余計算の基礎となる同値関係について&lt;/p&gt;</summary><content type="html">&lt;h2 id="hazimeni"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;プログラミングではしばしば剰余計算 (割った余りの計算) が出てくる。このとき、やって良い操作と良くない操作の区別をつけたり、効率よく計算を行ったりするために、背景にある理屈を学ぶことは有用と思う。&lt;/p&gt;
&lt;h2 id="tong zhi guan xi"&gt;同値関係&lt;/h2&gt;
&lt;p&gt;まずは剰余計算で利用する "等しい" の意味を定める。ただし、剰余計算よりも一般的な場合を扱う。&lt;/p&gt;
&lt;p&gt;集合 &lt;span class="math"&gt;\(X\)&lt;/span&gt; とその元 &lt;span class="math"&gt;\(a, b, c \in X\)&lt;/span&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射律: &lt;span class="math"&gt;\(a \sim a\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;対象律: &lt;span class="math"&gt;\(a \sim b \Rightarrow b \sim a\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;推移律: &lt;span class="math"&gt;\(a \sim b, b \sim c \Rightarrow a \sim c\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を満たすとき、二項関係 &lt;span class="math"&gt;\(\sim\)&lt;/span&gt; は同値関係であるという。&lt;/p&gt;
&lt;h3 id="tong zhi guan xi noli"&gt;同値関係の例&lt;/h3&gt;
&lt;p&gt;整数環 &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; に対して、ある &lt;span class="math"&gt;\(0\)&lt;/span&gt; でない元 &lt;span class="math"&gt;\(n \in \mathbb{Z}\)&lt;/span&gt; を一つ取る。任意の &lt;span class="math"&gt;\(a, b \in \mathbb{Z}\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(a, b\)&lt;/span&gt; を &lt;span class="math"&gt;\(n\)&lt;/span&gt; で割った余りが等しいとき &lt;span class="math"&gt;\(a \equiv b \mod n\)&lt;/span&gt; と書く。このとき &lt;span class="math"&gt;\(\equiv\)&lt;/span&gt; は同値関係となる。&lt;/p&gt;
&lt;p&gt;反射律と対象律は明らかなので、推移律だけ示す。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a, b, c \in \mathbb{Z}\)&lt;/span&gt; が &lt;span class="math"&gt;\(a \equiv b \mod n, b \equiv c \mod n\)&lt;/span&gt; を満たすとする。このとき、ある &lt;span class="math"&gt;\(p, q \in \mathbb{Z}\)&lt;/span&gt; が存在して &lt;span class="math"&gt;\(a = p \times n + b, b = q \times n + c\)&lt;/span&gt; とかける。後者を前者に代入して &lt;span class="math"&gt;\(a = p \times n + q \times n + c\)&lt;/span&gt; より &lt;span class="math"&gt;\(a = (p + q) \times n + c\)&lt;/span&gt; となり &lt;span class="math"&gt;\(a \equiv c \mod n\)&lt;/span&gt; とわかった。&lt;/p&gt;
&lt;p&gt;整数環 &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; に対して、通常の意味の &lt;span class="math"&gt;\(=\)&lt;/span&gt; は同値関係である。また不等号 &lt;span class="math"&gt;\(&amp;gt;\)&lt;/span&gt; や &lt;span class="math"&gt;\(\geq\)&lt;/span&gt; は、推移律を満たすものの、反射律と対象律や対象律を満たさないので同値関係ではない。&lt;/p&gt;
&lt;h2 id="tong zhi lei_1"&gt;同値類&lt;/h2&gt;
&lt;p&gt;同値関係によって等しいとみなせる要素の集まりに分割することを考える。&lt;/p&gt;
&lt;p&gt;集合 &lt;span class="math"&gt;\(X\)&lt;/span&gt; とその元 &lt;span class="math"&gt;\(x \in X\)&lt;/span&gt; を一つ取り &lt;span class="math"&gt;\(X\)&lt;/span&gt; の同値関係を &lt;span class="math"&gt;\(\sim\)&lt;/span&gt; とする。このとき &lt;span class="math"&gt;\(x\)&lt;/span&gt; と同値関係にある &lt;span class="math"&gt;\(X\)&lt;/span&gt; の元全体の集合&lt;/p&gt;
&lt;div class="math"&gt;$$C(x) = \left\{y \in X|y \sim x\right\}$$&lt;/div&gt;
&lt;p&gt;を &lt;span class="math"&gt;\(x\)&lt;/span&gt; の同値類という。&lt;/p&gt;
&lt;p&gt;例えば、整数環 &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; に対して 3 で割った余りを考えると&lt;/p&gt;
&lt;div class="math"&gt;$$C(1) = \left\{\ldots, -2, 1, 4, 7, \ldots\right\}$$&lt;/div&gt;
&lt;p&gt;など。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(x, y \in X\)&lt;/span&gt; に対して、その同値類 &lt;span class="math"&gt;\(C(x), C(y)\)&lt;/span&gt; に交わりがあれば &lt;span class="math"&gt;\(C(x) = C(y)\)&lt;/span&gt; である。&lt;/p&gt;
&lt;p&gt;任意の &lt;span class="math"&gt;\(a \in C(x)\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(b \in C(x) \cap C(y)\)&lt;/span&gt; を取る。すると &lt;span class="math"&gt;\(b\)&lt;/span&gt; は &lt;span class="math"&gt;\(C(x)\)&lt;/span&gt; の元であるので &lt;span class="math"&gt;\(a \sim b\)&lt;/span&gt; となる。一方で &lt;span class="math"&gt;\(b\)&lt;/span&gt; は &lt;span class="math"&gt;\(C(y)\)&lt;/span&gt; の元でもあるので &lt;span class="math"&gt;\(a \in C(y)\)&lt;/span&gt; となり &lt;span class="math"&gt;\(C(x) \subseteq C(y)\)&lt;/span&gt; が示せた。逆の包含関係も同様に示せる。&lt;/p&gt;
&lt;p&gt;このようにして同値類の全体は集合 &lt;span class="math"&gt;\(X\)&lt;/span&gt; を互いに交わらない部分集合に分割する。同値類全体の集合を、集合 &lt;span class="math"&gt;\(X\)&lt;/span&gt; の同値関係 &lt;span class="math"&gt;\(\sim\)&lt;/span&gt; による商集合といい &lt;span class="math"&gt;\(X/\sim\)&lt;/span&gt; と書く。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X\)&lt;/span&gt; から &lt;span class="math"&gt;\(X/\sim\)&lt;/span&gt; への上への写像&lt;/p&gt;
&lt;div class="math"&gt;$$f: X\Rightarrow X/\sim$$&lt;/div&gt;
&lt;p&gt;を考える。このとき &lt;span class="math"&gt;\(x \in X\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(C(x)\)&lt;/span&gt; を対応させるとき、つまり &lt;span class="math"&gt;\(f(x) = C(x)\)&lt;/span&gt; とするとき、写像 &lt;span class="math"&gt;\(f\)&lt;/span&gt; を自然な射影という。写像 &lt;span class="math"&gt;\(f\)&lt;/span&gt; は単射であるが、一般には全射ではない。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(C(x)\)&lt;/span&gt; に対して &lt;span class="math"&gt;\(x\)&lt;/span&gt; を &lt;span class="math"&gt;\(C(x)\)&lt;/span&gt; の代表元という。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Residual"></category></entry><entry><title>AtCoder Beginner Contest 137 参加</title><link href="/20190810.html" rel="alternate"></link><published>2019-08-10T00:00:00+09:00</published><updated>2019-08-10T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2019-08-10:/20190810.html</id><summary type="html">&lt;p&gt;ABC の三完答&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc137"&gt;AtCoder Beginner Contest 137&lt;/a&gt; に参加した。今回は ABC 3 完答 の 1885 位でパフォーマンスは 974 だった。&lt;/p&gt;
&lt;p&gt;以下のコードは PyPy3 (2.4.0) で AC を確認している。&lt;/p&gt;
&lt;h2 id="wen ti  a"&gt;問題 A&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(A + B, A - B, A \times B\)&lt;/span&gt; の最大値を表示せよという問題なので、そのまま計算した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  b"&gt;問題 B&lt;/h2&gt;
&lt;p&gt;設問の制約から黒石が左右の端に到達することを考えなくても良い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黒石が最も左に伸びるのは X が右端であった場合&lt;/li&gt;
&lt;li&gt;黒石が最も右に伸びるのは X が左端であった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なのでその時の左右とその間の座標の数字を空白区切りで出力すれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;LR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LR&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  c"&gt;問題 C&lt;/h2&gt;
&lt;p&gt;2 つの文字列がアナグラムとして一致するかどうかを判定するには、両方の文字列をソートしてから比較すれば良い。例えば問題文に例示されている &lt;code&gt;greenbin&lt;/code&gt; と &lt;code&gt;beginner&lt;/code&gt; をソートすればともに &lt;code&gt;beeginnr&lt;/code&gt; となり一致を容易に判定できる。&lt;/p&gt;
&lt;p&gt;解説よりややこしくなっているがコンテスト中は下記のように考えた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各入力文字列 &lt;span class="math"&gt;\(s_i\)&lt;/span&gt; をソートする&lt;/li&gt;
&lt;li&gt;S = [&lt;span class="math"&gt;\(s_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(s_2\)&lt;/span&gt;, ..., &lt;span class="math"&gt;\(s_N\)&lt;/span&gt;] をソートする&lt;/li&gt;
&lt;li&gt;一致する要素の個数を数え上げる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最初は雑に二重ループを回して TLE を食らった。一致する要素がある間はカウントアップして、値が変わったらカウンタをリセットする方針で実装して通した。なお個数の数え上げについては、一致するものの個数が &lt;span class="math"&gt;\(c\)&lt;/span&gt; の場合に &lt;span class="math"&gt;\(1\)&lt;/span&gt; から &lt;span class="math"&gt;\(c - 1\)&lt;/span&gt; の総和となる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# print(N, S)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# print(S)&lt;/span&gt;

&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;si&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;sj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# 最後の足し忘れ防止&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen ti  d"&gt;問題 D&lt;/h2&gt;
&lt;p&gt;コンテスト中に AC できず。最初は、初日から考えて受取可能なもののうちで報酬の高いものから埋めていく方針で考えたが、サンプルケースが通るので意気揚々と提出したものの WA を食らった。今度は逆に最終日から埋めていく方針にしたが、日数と報酬のどちらを優先してソートしてもうまく行かず時間切れとなった。解説を読みつつ理解したが、やはり日数の制約の中で最も報酬の高いものを調べて選ぶ必要があった。&lt;/p&gt;
&lt;p&gt;コンテスト後に改めて実装して AC した。方針は優先度付きキューを 2 つ使って&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;日付優先で 1 つ目のキューに入力を貯める&lt;/li&gt;
&lt;li&gt;残日数が少ない方から考える&lt;/li&gt;
&lt;li&gt;残日数内のものを 1 つ目のキューから取り出して、報酬優先 (高いものが先頭に来るように -1 倍している) で 2 つ目に追加する&lt;/li&gt;
&lt;li&gt;2 つ目のキューから取り出して得られる報酬に加算する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という方針で実装した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# print(N, M, AB)&lt;/span&gt;

&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;remain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;# print('remain={}, AB={}, ans={}'.format(remain, AB, ans))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;remain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# print('work={}'.format(work))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="AtCoder"></category><category term="ProgrammingContest"></category></entry><entry><title>バイバイマンを数えてみた</title><link href="/20160219.html" rel="alternate"></link><published>2016-02-19T00:00:00+09:00</published><updated>2016-02-19T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2016-02-19:/20160219.html</id><summary type="html">&lt;p&gt;バイバイマンを数えように挑戦してみた&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://codeiq.jp/q/2593"&gt;バイバイマンを数えよう&lt;/a&gt; に挑戦してみました。コードゴルフは初めてでしたが Python で 51B (&lt;a href="http://d.hatena.ne.jp/Ozy/20160202"&gt;eijit&lt;/a&gt;) と一位までもう少しのところまで行きました。試行錯誤しながら迷走して面白かったので記録を残しておこうと思います。&lt;/p&gt;
&lt;h1 id="su po naarugorizumu"&gt;素朴なアルゴリズム&lt;/h1&gt;
&lt;h2 id="wen ti wojie xi suru 1"&gt;問題を解析する 1&lt;/h2&gt;
&lt;p&gt;バイバイマンの増え方が想像しにくい場合は &lt;a href="http://d.hatena.ne.jp/Ozy/20160131"&gt;バイバイマンの増え方&lt;/a&gt; もあわせてご覧ください。&lt;/p&gt;
&lt;p&gt;各サイズのバイバイマンの個体数と総数を世代ごとに追うと以下の表のようになります。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;世代&lt;/th&gt;
&lt;th&gt;c(1, n)&lt;/th&gt;
&lt;th&gt;c(2, n)&lt;/th&gt;
&lt;th&gt;c(4, n)&lt;/th&gt;
&lt;th&gt;c(8, n)&lt;/th&gt;
&lt;th&gt;c(6, n)&lt;/th&gt;
&lt;th&gt;s(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ここで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c(s, n) はサイズが s で第 n 世代のバイバイマンの個体数&lt;/li&gt;
&lt;li&gt;s(n) は第 n 世代のバイバイマンの総数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を表します。するとすぐ解るように&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c(1, n) = c(6, n-1) + c(8, n-1)&lt;/li&gt;
&lt;li&gt;c(2, n) = c(1, n-1) + c(6, n-1)&lt;/li&gt;
&lt;li&gt;c(4, n) = c(2, n-1)&lt;/li&gt;
&lt;li&gt;c(8, n) = c(4, n-1)&lt;/li&gt;
&lt;li&gt;c(6, n) = c(8, n-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と前の世代の一つ小さいサイズの個体数からの移動 (s = 6 は s = 1 に移動したとみなす) と、前の世代のサイズ 8, 6 の分裂からの "繰り上がり" の合計という関係が見えます。&lt;/p&gt;
&lt;h2 id="[85b] zui chu nokodo"&gt;[85B] 最初のコード&lt;/h2&gt;
&lt;p&gt;最初はコードゴルフだと気が付かずに 400B 弱のコードを書いて提出してしまったのですがあとから気が付いて短縮してみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで 85B でした。要素の格納に配列を使いました。工夫したのは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1,0,0,0,0] より [1]+[0]*4 のほうが 2B 少ない&lt;/li&gt;
&lt;li&gt;インデントは空白一つ&lt;/li&gt;
&lt;li&gt;合計を sum で計算する&lt;/li&gt;
&lt;li&gt;配列を rotate shift した&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。結果を見てまるで歯が立たないことに愕然としてコードゴルフの勉強を始めました。&lt;/p&gt;
&lt;h2 id="[71b] chu metenowanraina"&gt;[71B] 初めてのワンライナー&lt;/h2&gt;
&lt;p&gt;ウェブの記事をあちこち見て回って以下のようなことを学びました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ループカウンタを使わないなら exec"コード"*ループ回数 でコードを指定回数繰り返せる&lt;/li&gt;
&lt;li&gt;if などが入れ子にならないなら改行とインデントを省いてセミコロン ';' で代替できる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print sum(c);c=c[4:]+c[:4];c[1]+=c[0];c[0]+=c[4];"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで 14B 縮みました。ですがまだ足りません。&lt;/p&gt;
&lt;h2 id="[67b] pei lie woyameru"&gt;[67B] 配列をやめる&lt;/h2&gt;
&lt;p&gt;配列の要素にアクセスするコストが高いと気が付いたので a, b, c, d, e といった五つの変数で置き換えてみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print a+b+c+d+e;f=a+d;a=d+e;c=b;d=c;e=d;b=f"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで更に 4B 縮みました。しかし一時変数 f を使っていて無駄です。&lt;/p&gt;
&lt;h2 id="[64b] yi shi bian shu woshi wazunisuwatsupusuru"&gt;[64B] 一時変数を使わずにスワップする&lt;/h2&gt;
&lt;p&gt;コードゴルフの勉強をしたときに一時変数を使わずにスワップする話題があったのを思い出しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような構文です。これを適用して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print a+b+c+d+e;a,b,c,d,e=d+e,a+e,b,c,d;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更に 3B 縮みました。これで何とかバッヂ獲得圏内に入ったのですがトップは 50B とまだ絶望的な差があります。&lt;/p&gt;
&lt;h2 id="[62b] gong tong suruji suan womatomeru"&gt;[62B] 共通する計算をまとめる&lt;/h2&gt;
&lt;p&gt;ここでコードを眺めていて&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と計算が重複していることに気が付きました。これを利用できないかと考えて&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"a,b,c,d,e=d+e,a+e,b,c,d;print b+c+d+e;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と更に 2B 縮みました。ここで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print と個体数更新の計算の順序を入れ替える&lt;/li&gt;
&lt;li&gt;b=a+e を利用して (現世代の) a+b -&amp;gt; (次世代の) b と置き換えても結果は変わらない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということをしています。&lt;/p&gt;
&lt;h1 id="zui shi  (dehanakatsuta) arugorizumu_1"&gt;最適 (ではなかった) アルゴリズム&lt;/h1&gt;
&lt;p&gt;ここまでで、この方針でこれ以上はコードを削れないと思い、基本に立ち返って具体例を眺めて別の規則がないか考えました。&lt;/p&gt;
&lt;h2 id="wen ti wojie xi suru 2"&gt;問題を解析する 2&lt;/h2&gt;
&lt;p&gt;すると&lt;/p&gt;
&lt;p&gt;s(n) = s(n-1) + c(1, n)&lt;/p&gt;
&lt;p&gt;という規則があるようでした。理由を考えてみれば当たり前の話でした。バイバイマンの個体数が増えるのは、サイズ 8 と 6 が次の世代になってサイズ 16 と 12 になりサイズ 1, 6 とサイズ 1, 2 に分裂した場合です。その際に増えた個体をサイズ 1 のものとみなせばよいわけです。&lt;/p&gt;
&lt;h2 id="[63b] zhan lue de hou tui"&gt;[63B] 戦略的後退&lt;/h2&gt;
&lt;p&gt;早速この解析結果に基づいて実装したところ、残念ながら総和を保持するための変数のために却って 1B 増えてしまいました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"s+=a;print s;a,b,c,d,e=d+e,a+e,b,c,d;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果が正しいことは確認したのでこの方針をもう少し突き詰めて考えます。&lt;/p&gt;
&lt;h2 id="lin jie liu xiang jian jian hua shi"&gt;隣接六項間漸化式&lt;/h2&gt;
&lt;p&gt;利用する変数の削減が必要であると痛感したのでサイズ 1 の個体数だけ都合よく計算できないかと考えました。&lt;/p&gt;
&lt;p&gt;(ここまで使っていた記号 c(1, n) などを &lt;span class="math"&gt;\(c_{1, n}\)&lt;/span&gt; に読み替えてください)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_{1, n} = c_{6, n-1} + c_{8, n-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_{2, n} = c_{1, n-1} + c_{6, n-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_{4, n} = c_{2, n-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_{8, n} = c_{4, n-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_{6, n} = c_{8, n-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;を思い出して 1. の &lt;span class="math"&gt;\(c_{1, n} = c_{6, n-1} + c_{8, n-1}\)&lt;/span&gt; をサイズ 1 の項だけで表すことを考えます。&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
c_{1, n} &amp;amp;= c_{6, n-1} + c_{8, n-1}\\
&amp;amp;=c_{8, n-2} + c_{4, n-2}\\
&amp;amp;=c_{4, n-3} + c_{2, n-3}\\
&amp;amp;=c_{2, n-4} + c_{1, n-4} + c_{6, n-4}\\
&amp;amp;=c_{1, n-5} + c_{6, n-5} + c_{1, n-4} + c_{8, n-5}\\
&amp;amp;=c_{1, n-5} + c_{1, n-4} + c_{6, n-5} + c_{8, n-5}\\
&amp;amp;=c_{1, n-5} + c_{1, n-4} + c_{1, n-4}\\
&amp;amp;=c_{1, n-5} + 2c_{1, n-4}\\
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;と&lt;/p&gt;
&lt;div class="math"&gt;$$
c_{1, n} = c_{1, n-5} + 2c_{1, n-4}
$$&lt;/div&gt;
&lt;p&gt;で表せることが解りました。&lt;/p&gt;
&lt;p&gt;さてこれは隣接六項間の漸化式なので解いてみましょう。特性方程式は&lt;/p&gt;
&lt;div class="math"&gt;$$
x^5 - 2x - 1 = 0
$$&lt;/div&gt;
&lt;p&gt;ですが、残念なことに五次方程式には解の公式がありません。しかしすぐわかるように &lt;span class="math"&gt;\(x = -1\)&lt;/span&gt; がこの方程式の解の一つであることが解ります。従って因数分解すれば&lt;/p&gt;
&lt;div class="math"&gt;$$
x^5 - 2x - 1 = (x + 1)(x^4 - x^3 + x^2 - x -1)
$$&lt;/div&gt;
&lt;p&gt;と一次と四次の多項式に分解できました。後者の四次の多項式 = 0 の解は残念ながら複素数を含み、単純な有理数や整数ではないようです。おそらくこの漸化式を解いてもコードの短縮に寄与しそうにありません。今回は面倒くささに負けて計算を諦めましたが漸化式を解いて一般項を求めるのも面白いかもしれません。&lt;/p&gt;
&lt;h2 id="[63b] ting zhi"&gt;[63B] 停滞&lt;/h2&gt;
&lt;p&gt;脱線しましたので閑話休題して、サイズ 1 の要素数の漸化式は&lt;/p&gt;
&lt;div class="math"&gt;$$
c_{1, n} = c_{1, n-5} + 2c_{1, n-4}
$$&lt;/div&gt;
&lt;p&gt;であったので素直にこれを実装して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"s+=a;print s;a,b,c,d,e=b,c,d,e,a+2*b;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;残念ながら 63B と変わりありません。&lt;/p&gt;
&lt;h2 id="[56b] yatsutoqian jin"&gt;[56B] やっと前進&lt;/h2&gt;
&lt;p&gt;漸化式の計算を行っているときに気が付いたのですが、他のサイズの要素数も同じ漸化式で表せて&lt;/p&gt;
&lt;div class="math"&gt;$$
c_{s, n} = c_{s, n-5} + 2c_{s, n-4}
$$&lt;/div&gt;
&lt;p&gt;が全ての &lt;span class="math"&gt;\(s=1, 2, 4, 8, 6\)&lt;/span&gt; に対して成り立ちます。これらの総和を取り&lt;/p&gt;
&lt;div class="math"&gt;$$
\sum_{s} c_{s, n} = \sum_{s} c_{s, n-5} + \sum_{s} 2c_{s, n-4}
$$&lt;/div&gt;
&lt;p&gt;総和はバイバイマンの総数であることを思い出すと&lt;/p&gt;
&lt;div class="math"&gt;$$
s_{n} = s_{n-5} + 2s_{n-4}
$$&lt;/div&gt;
&lt;p&gt;とバイバイマンの総和をじかに計算できました。バイバイマンの総数の漸化式に関する初項が 1, 1, 1, 1, 2 であることを合わせて実装すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print a;a,b,c,d,e=b,c,d,e,a+2*b;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ようやく 56B まで縮みました。&lt;/p&gt;
&lt;h2 id="[53b] pei lie zai bi"&gt;[53B] 配列再び&lt;/h2&gt;
&lt;p&gt;もうひとひねりが必要なので再び配列を利用します。更に計算するのが高々 100 世代なので rotate shift などもやめました。なりふりを構っている場合ではありません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print a[-5];a+=[a[-5]+2*a[-4]];"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで 53B まできました。これは&lt;/p&gt;
&lt;p&gt;1, 1, 1, 1, 2, 3, 3, 3, 5, 8, ...&lt;/p&gt;
&lt;p&gt;と漸化式に従って次の世代の総数を追加して無制限に成長していく配列で、末尾から -5 の位置を現在の世代の総数として出力しています。&lt;/p&gt;
&lt;h2 id="[51b] zui hou noyi gong fu"&gt;[51B] 最後の一工夫&lt;/h2&gt;
&lt;p&gt;53B のコードは配列のインデックスに負の値を使っており '-' だけ損をしています。この配列の順序を逆にして '-' を三つ削り、代わりに += を = と +a に置き換えても差し引きして 2B の短縮になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="s2"&gt;"print a[4];a=[a[4]+2*a[3]]+a;"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが今回の私の回答でした。&lt;/p&gt;
&lt;h1 id="zui hou ni_1"&gt;最後に&lt;/h1&gt;
&lt;p&gt;あともう一バイトを削れないかと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標準入力で与えられる 100 を 2B で取り込めないか&lt;/li&gt;
&lt;li&gt;100 を 2B で表せないか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったことを考えたのですが、いずれもうまくいきませんでした。公開される python の回答やそのほかの言語の回答が楽しみです。&lt;/p&gt;
&lt;p&gt;最後に、このような面白い問題を提供してくださった Ozy さまと、場を提供してくださった CodeIQ さまに感謝します。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Code Golf"></category></entry><entry><title>rotate_left_shift(x, 1) - x の最適化</title><link href="/20140207.html" rel="alternate"></link><published>2014-02-07T00:00:00+09:00</published><updated>2014-02-07T00:00:00+09:00</updated><author><name>eijit</name></author><id>tag:None,2014-02-07:/20140207.html</id><summary type="html">&lt;p&gt;rotate_left_shift(x, 1) - x の最適化&lt;/p&gt;</summary><content type="html">&lt;p&gt;uint32_t x に対して掲題の計算を行いたい。&lt;/p&gt;
&lt;p&gt;rotate shift 命令のないプロセッサの場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を計算することになり四命令 (&amp;lt;&amp;lt;, |, &amp;gt;&amp;gt;, -) が必要となる。しかしこの演算は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と等価であるので後者であれば二命令 (+, &amp;gt;&amp;gt;) で実現できて効率が良い。&lt;/p&gt;
&lt;p&gt;実際に等価である事は次のようにして確認できる。基本的なアイデアは x を上位 1 bit と下位 31 bit に分けて考えることである。&lt;/p&gt;
&lt;p&gt;演算子 | の左右の有効ビットは左が上位 31 bit で右が下位 1 bit であるので重なりがない。よって | を + に置き換えられる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加法は結合法則と交換法則を持つので外側の括弧を外して演算の順序を入れ替えても良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;真ん中の x を下位 31 bit と上位 1 bit に分ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x7FFF&lt;/span&gt; &lt;span class="n"&gt;FFFF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x8000&lt;/span&gt; &lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前の二項は x の下位 31 bit の二倍から x の下位 31 bit を引いたものなので x の下位 31 bit に等しい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x7FFF&lt;/span&gt; &lt;span class="n"&gt;FFFF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x8000&lt;/span&gt; &lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最上位ビットのみの数値の引き算は足し算と等しい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x7FFF&lt;/span&gt; &lt;span class="n"&gt;FFFF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x8000&lt;/span&gt; &lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前の二項は x そのものである。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Optimization"></category><category term="Bitwise Operation"></category></entry></feed>